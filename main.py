#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import subprocess
import sys
from pathlib import Path
from typing import AnyStr, List, Set, Optional
import argparse
from datetime import datetime
import re

from info import VERSION


class CodebaseConverter:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–¥–±–∞–∑—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    
    def __init__(self, output_file: str = "codebase_export.txt", output_dir: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞.
        
        Args:
            output_file: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_dir: –ü—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª
            regex_blacklist: Regex –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
        """
        
        if output_dir is not None:
            self.output_file = output_dir + os.sep + output_file
        else:
            self.output_file = output_file
        
        self.processed_files = 0
        self.skipped_files = 0
        self.errors = []
        
    def get_git_files(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            
        Raises:
            subprocess.CalledProcessError: –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ git –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
            FileNotFoundError: –ï—Å–ª–∏ git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É git ls-tree –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
            result = subprocess.run(
                ["git", "ls-tree", "-r", "HEAD", "--name-only"],
                capture_output=True,
                text=True,
                check=True
            )
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –≤—ã–≤–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            files = [line.strip() for line in result.stdout.split('\n') if line.strip()]
            
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
            return files
            
        except subprocess.CalledProcessError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã git: {e.stderr}"
            print(f"‚úó {error_msg}")
            raise
            
        except FileNotFoundError:
            error_msg = "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"
            print(f"‚úó {error_msg}")
            raise

    def filter_files_by_extensions(self, files: List[str], extensions: Set[str]) -> List[str]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º.
        
        Args:
            files: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            extensions: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, {'.py', '.js'})
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        """
        if not extensions:
            return files
            
        filtered_files = []
        for file_path in files:
            file_ext = Path(file_path).suffix.lower()
            if file_ext in extensions:
                filtered_files.append(file_path)
                
        print(f"‚úì –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_files)} —Ñ–∞–π–ª–æ–≤")
        return filtered_files
    
    def filter_files_by_regex(self, files: List[str], regex: re.Pattern) -> List[str]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –ø–æ Regex.
        
        Args:
            files: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            regex: Regex –ø–∞—Ç—Ç–µ—Ä–Ω
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        """
        
        filtered_files = []
        for file_path in files:
            if not regex.match(file_path):
                filtered_files.append(file_path)
        
        print(f"‚úì –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ Regex –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_files)} —Ñ–∞–π–ª–æ–≤")
        return filtered_files

    def create_file_tree(self, files: List[str]) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        
        Args:
            files: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            
        Returns:
            –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
        """
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤...")
        
        tree_lines = ["–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:", "=" * 50, ""]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        sorted_files = sorted(files)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
        dirs = {}
        for file_path in sorted_files:
            path_parts = Path(file_path).parts
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            current_dict = dirs
            for part in path_parts[:-1]:  # –í—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                if part not in current_dict:
                    current_dict[part] = {}
                current_dict = current_dict[part]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            filename = path_parts[-1]
            current_dict[filename] = None
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
        def build_tree(d: dict, prefix: str = "") -> List[str]:
            lines = []
            items = sorted(d.items())
            
            for i, (name, subdirs) in enumerate(items):
                is_last = i == len(items) - 1
                current_prefix = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
                lines.append(f"{prefix}{current_prefix}{name}")
                
                if subdirs is not None:  # –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                    next_prefix = prefix + ("    " if is_last else "‚îÇ   ")
                    lines.extend(build_tree(subdirs, next_prefix))
                    
            return lines
        
        tree_lines.extend(build_tree(dirs))
        tree_lines.extend(["", "=" * 50, "", ""])
        
        return "\n".join(tree_lines)

    def read_file_safely(self, file_path: str) -> Optional[str]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                self.errors.append(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
                return None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
            encodings = ['utf-8', 'cp1251', 'latin1', 'ascii']
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding, errors='strict') as f:
                        content = f.read()
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (> 1MB)
                    if len(content) > 1024 * 1024:
                        self.errors.append(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>1MB): {file_path}")
                        return f"[–§–ê–ô–õ –°–õ–ò–®–ö–û–ú –ë–û–õ–¨–®–û–ô - –°–û–î–ï–†–ñ–ò–ú–û–ï –ü–†–û–ü–£–©–ï–ù–û]\n–†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤"
                    
                    return content
                    
                except UnicodeDecodeError:
                    continue
                except UnicodeError:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π - –≤–µ—Ä–æ—è—Ç–Ω–æ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
            self.errors.append(f"–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {file_path}")
            return "[–ë–ò–ù–ê–†–ù–´–ô –§–ê–ô–õ –ò–õ–ò –ù–ï–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–ê–Ø –ö–û–î–ò–†–û–í–ö–ê]"
            
        except PermissionError:
            self.errors.append(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {file_path}")
            return "[–ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê –ö –§–ê–ô–õ–£]"
            
        except Exception as e:
            self.errors.append(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {str(e)}")
            return f"[–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–ê: {str(e)}]"

    def process_files(self, files: List[str]) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.
        
        Args:
            files: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(files)} —Ñ–∞–π–ª–æ–≤...")
        
        content_parts = []
        separator = "=" * 80
        
        for i, file_path in enumerate(files, 1):
            print(f"  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ({i}/{len(files)}): {file_path}")
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            file_content = self.read_file_safely(file_path)
            
            if file_content is None:
                self.skipped_files += 1
                
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
            file_block = [
                separator,
                f"–§–ê–ô–õ: {file_path}",
                f"–†–ê–ó–ú–ï–†: {len(file_content)} —Å–∏–º–≤–æ–ª–æ–≤",
                f"–û–ë–†–ê–ë–û–¢–ê–ù: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                separator,
                "",
                file_content,
                "",
                ""
            ]
            
            content_parts.extend(file_block)
            self.processed_files += 1
        
        return "\n".join(content_parts)

    def create_header(self) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
        
        Returns:
            –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        current_dir = os.getcwd()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        header = f"""
–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {timestamp}
–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π: To LLM View {VERSION}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.processed_files}
- –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.skipped_files}
- –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(self.errors)}

{'=' * 80}

"""
        return header

    def create_footer(self) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–≤–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö.
        
        Returns:
            –ü–æ–¥–≤–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        footer_parts = [
            "=" * 80,
            "–ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò",
            "=" * 80,
            "",
            f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.processed_files}",
            f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.skipped_files}",
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {len(self.errors)}",
            ""
        ]
        
        if self.errors:
            footer_parts.extend([
                "–î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:",
                "-" * 40,
                ""
            ])
            
            for error in self.errors:
                footer_parts.append(f"‚Ä¢ {error}")
            
            footer_parts.append("")
        
        footer_parts.extend([
            f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "=" * 80
        ])
        
        return "\n".join(footer_parts)

    def convert(self, extensions: Optional[Set[str]] = None, regex: Optional[re.Pattern] = None) -> None:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∫–æ–¥–±–∞–∑—ã.
        
        Args:
            extensions: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, {'.py', '.js'})
            regex: Regex –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        """
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –∫–æ–¥–±–∞–∑—ã...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ Git
            files = self.get_git_files()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º
            if extensions:
                files = self.filter_files_by_extensions(files, extensions)
            
            if regex:
                files = self.filter_files_by_regex(files, regex)
            
            if not files:
                print("‚ö†Ô∏è  –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
            file_tree = self.create_file_tree(files)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            files_content = self.process_files(files)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª: {self.output_file}")
            
            with open(self.output_file, 'w', encoding='utf-8') as f:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –±—ã–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
                f.write(self.create_header())
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
                f.write(file_tree)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
                f.write(files_content)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–¥–≤–∞–ª
                f.write(self.create_footer())
            
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.processed_files}")
            print(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.skipped_files}")
            print(f"   üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {self.output_file}")
            
            if self.errors:
                print(f"   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(self.errors)} (–¥–µ—Ç–∞–ª–∏ –≤ —Ñ–∞–π–ª–µ)")
            
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            sys.exit(1)


def parse_extensions(ext_string: str) -> Set[str]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤.
    
    Args:
        ext_string: –°—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "py,js,html")
        
    Returns:
        –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Å —Ç–æ—á–∫–∞–º–∏
    """
    if not ext_string:
        return set()
    
    extensions = set()
    for ext in ext_string.split(','):
        ext = ext.strip()
        if ext and not ext.startswith('.'):
            ext = '.' + ext
        if ext:
            extensions.add(ext.lower())
    
    return extensions


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    parser = argparse.ArgumentParser(
        description="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∫–æ–¥–±–∞–∑—ã –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏",
        epilog="–ü—Ä–∏–º–µ—Ä: python codebase_converter.py -o my_codebase.txt -w py,js,html"
    )
    
    parser.add_argument(
        '-o', '--output',
        default='codebase_export.txt',
        help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: codebase_export.txt)'
    )
    
    parser.add_argument(
        '-r', '--root',
        action='store_true',
        help='–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Å —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–æ–π, –∞ –Ω–µ –≤ –Ω–µ–π'
    )
    
    parser.add_argument(
        '-w', '--whitelist',
        help='–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: py,js,html)'
    )
    
    parser.add_argument(
        '-rb', '--regex-blacklist',
        default=r'.*',
        help='Regex –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤'
    )
    
    args = parser.parse_args()
    
    # –ü–∞—Ä—Å–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    extensions = parse_extensions(args.whitelist) if args.whitelist else None
    
    if extensions:
        print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º: {', '.join(sorted(extensions))}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if not os.path.exists('.git'):
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")
        print("   –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–µ–Ω—å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–Ω–æ–≤–∞")
        return 1
    
    output_name = args.output
    root_path = None
    if args.root:
        p = os.getcwd()
        root_path = p[:p.rfind(os.sep)]
        
        output_name = p[p.rfind(os.sep)+len(os.sep):]+"."+output_name
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    converter = CodebaseConverter(output_name, root_path)
    converter.convert(extensions, re.compile(args.regex_blacklist, re.IGNORECASE))
    
    return 0


if __name__ == "__main__":
    main()